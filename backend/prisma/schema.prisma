generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  fullName  String
  email     String     @unique
  mobile    BigInt     @unique
  password  String
  role      UserRole
  jobSeeker JobSeeker?
}

model JobSeeker {
  id      String       @id @default(cuid())
  age     Int
  gender  UserGender
  user    User         @relation(fields: [userId], references: [id])
  userId  String       @unique
  profile UserProfile?
}

model UserProfile {
  id            String             @id @default(cuid())
  jobSeekerId   String             @unique
  jobSeeker     JobSeeker          @relation(fields: [jobSeekerId], references: [id])
  education     String
  experience    String
  skills        UserSkillMapping[]
  preferredJobs PreferredJob[]
}

model PreferredJob {
  id          String      @id @default(cuid())
  mlJobId     String
  mlJob       MLJob       @relation(fields: [mlJobId], references: [id])
  profileId   String
  userProfile UserProfile @relation(fields: [profileId], references: [id])
}

model MLSkill {
  id                String             @id @default(cuid())
  name              String
  mlJobId           String
  mlJob             MLJob              @relation(fields: [mlJobId], references: [id])
  userSkillMappings UserSkillMapping[]
}

model UserSkillMapping {
  id          String      @id @default(cuid())
  profileId   String
  userProfile UserProfile @relation(fields: [profileId], references: [id])
  skills      MLSkill[]
}

model MLJob {
  id             String         @id @default(cuid())
  title          String
  description    String?
  skills         MLSkill[]
  salary         Int
  employmentType EmploymentType
  preferredJobs  PreferredJob[]
}

enum UserRole {
  JOB_SEEKER
  JOB_RECRUITER
}

enum UserGender {
  MALE
  FEMALE
  OTHER
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
}
