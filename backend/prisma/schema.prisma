generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  fullName     String
  email        String        @unique
  mobile       String        @unique
  password     String
  role         UserRole
  jobRecruiter JobRecruiter?
  jobSeeker    JobSeeker?
}

model JobSeeker {
  id            String             @id @default(cuid())
  id            String             @id @default(cuid())
  age           Int
  gender        UserGender
  userId        String             @unique
  user          User               @relation(fields: [userId], references: [id])
  preferredJobs PreferredJob[]
  profile       UserProfile?
  skills        UserSkillMapping[]
  appliedJobs   RecruiterJob[]     @relation("JobSeekerToRecruiterJob")
}

model UserProfile {
  id          String    @id @default(cuid())
  jobSeekerId String    @unique
  education   String
  experience  String
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id])
}

model PreferredJob {
  id          String             @id @default(cuid())
  mlJobId     String
  jobSeekerId String
  jobSeeker   JobSeeker          @relation(fields: [jobSeekerId], references: [id])
  mlJob       MLJob              @relation(fields: [mlJobId], references: [id])
  skills      UserSkillMapping[]
}

model MLSkill {
  id               String             @id @default(cuid())
  name             String
  mlJobId          String
  mlJob            MLJob              @relation(fields: [mlJobId], references: [id])
  RecruiterSkills  RecruiterSkills[]
  UserSkillMapping UserSkillMapping[]
}

model UserSkillMapping {
  id             String       @id @default(cuid())
  skillId        String
  preferredJobId String
  jobSeekerId    String
  jobSeeker      JobSeeker    @relation(fields: [jobSeekerId], references: [id])
  preferredJob   PreferredJob @relation(fields: [preferredJobId], references: [id])
  skill          MLSkill      @relation(fields: [skillId], references: [id])
}

model MLJob {
  id             String         @id @default(cuid())
  title          String
  description    String?
  salary         String
  employmentType EmploymentType
  skills         MLSkill[]
  preferredJobs  PreferredJob[]
  recruiterJobs  RecruiterJob[]
}

model RecruiterJob {
  id             String            @id @default(cuid())
  id             String            @id @default(cuid())
  jobRecruiterId String
  mlJobId        String
  latitude       Float
  location       String
  longitude      Float
  preferance     Preferance
  experience     String
  qualifications String
  jobRecruiter   JobRecruiter      @relation(fields: [jobRecruiterId], references: [id])
  mlJob          MLJob             @relation(fields: [mlJobId], references: [id])
  skills         RecruiterSkills[]
  appliedUsers   JobSeeker[]       @relation("JobSeekerToRecruiterJob")
}

model RecruiterSkills {
  model RecruiterSkills {
  id             String       @id @default(cuid())
  skillId        String
  recruiterJobId String
  recruiterJob   RecruiterJob @relation(fields: [recruiterJobId], references: [id])
  skill          MLSkill      @relation(fields: [skillId], references: [id])
}

model JobRecruiter {
  id            String         @id @default(cuid())
  userId        String         @unique
  user          User           @relation(fields: [userId], references: [id])
  recruiterJobs RecruiterJob[]
}

enum UserRole {
  JOB_SEEKER
  JOB_RECRUITER
}

enum UserGender {
  MALE
  FEMALE
  OTHER
}

enum Preferance {
  Male
  Female
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
}
